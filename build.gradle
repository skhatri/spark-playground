apply plugin: "scala"
apply plugin: "idea"

class SparkHadoopAwsResolver {
    private String sparkV
    private String setName
    private def sparkForSet = ['3.0.1': '3.0.1', '3.1.0': '3.1.0', '3.1.1': '3.1.1']
    private def hadoopForSparkSet = ['3.1.0': '3.2.0', '3.1.1': '3.2.0']
    private def awsForHadoop = ['2.8.0': '1.10.6', '3.2.0': '1.11.375']

    SparkHadoopAwsResolver(String setName) {
        this.setName = setName
        this.sparkV = this.sparkForSet[setName]
    }

    List<String> getHadoopModules() {
        String hadoopVersion = hadoopForSparkSet[setName]
        return ["hadoop-common", "hadoop-aws"].collect { name ->
            "org.apache.hadoop:${name}:$hadoopVersion"
        }
    }

    List<String> getSparkModules() {
        return ["spark-core", "spark-sql", "spark-hive"].collect { name ->
            "org.apache.spark:${name}_2.12:$sparkV"
        }
    }

    List<String> getAwsModules() {
        String hadoopVersion = hadoopForSparkSet[setName]
        String awsVersion = awsForHadoop[hadoopVersion]
        List<String> awsModuleNames = ["aws-java-sdk-sts", "aws-java-sdk-s3"]
        awsModuleNames.collect { name ->
            "com.amazonaws:${name}:$awsVersion"
        }
    }
}

ext {
    moduleResolver = new SparkHadoopAwsResolver("${project.ext["spark.set"]}".toString())
}


dependencies {
    implementation("org.scala-lang:scala-compiler:2.12.11")
    implementation("org.scala-lang:scala-library:2.12.11")

    moduleResolver.sparkModules.each { dep ->
        println(dep)
        implementation(dep)
    }
    moduleResolver.hadoopModules.each { dep ->
        println(dep)
        implementation(dep)
    }
    moduleResolver.awsModules.each { dep ->
        println(dep)
        implementation(dep)
    }

    implementation("org.slf4j:slf4j-api:1.7.26")
    implementation("org.slf4j:log4j-over-slf4j:1.7.26")
    implementation("ch.qos.logback:logback-classic:1.2.3")

}

repositories {
    mavenCentral()
}

task run(type: JavaExec) {
    mainClass = "airbnb.${project.ext['class.name']}"
    classpath = project.sourceSets.main.runtimeClasspath
    args = []
}
